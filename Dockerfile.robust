# Robust Dockerfile with apt retry logic for repository issues
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV TZ=America/New_York

# Install system dependencies with retry logic for repository sync issues
RUN for i in 1 2 3 4 5; do \
        apt-get update && \
        apt-get install -y \
            curl \
            ca-certificates \
            gcc \
            g++ \
            wget \
            make \
            build-essential \
            --fix-missing \
            && break || { \
                echo "Attempt $i failed, waiting 30 seconds..."; \
                sleep 30; \
                apt-get clean; \
                rm -rf /var/lib/apt/lists/*; \
            } \
    done && \
    rm -rf /var/lib/apt/lists/*

# Set timezone to New York (same as US markets)
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copy requirements
COPY requirements.txt .

# Install TA-Lib with multiple fallback methods
RUN pip install --upgrade pip && \
    # Method 1: Try PyPI wheel first (fastest)
    (pip install --no-cache-dir TA-Lib>=0.4.25 && echo "✅ TA-Lib installed from PyPI wheel") || \
    # Method 2: Try specific wheel versions
    (pip install --no-cache-dir TA-Lib==0.4.28 && echo "✅ TA-Lib 0.4.28 installed from PyPI") || \
    # Method 3: Compile from source as last resort
    (echo "Compiling TA-Lib from source..." && \
     cd /tmp && \
     for i in 1 2 3; do \
         wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz && break || sleep 10; \
     done && \
     tar -xzf ta-lib-0.4.0-src.tar.gz && \
     cd ta-lib/ && \
     ./configure --prefix=/usr/local && \
     make && \
     make install && \
     ldconfig && \
     cd / && \
     rm -rf /tmp/ta-lib* && \
     pip install --no-cache-dir TA-Lib && \
     echo "✅ TA-Lib compiled and installed from source")

# Install other dependencies (excluding TA-Lib since it's already installed)
RUN grep -v "TA-Lib" requirements.txt > requirements_no_talib.txt || cp requirements.txt requirements_no_talib.txt && \
    pip install --no-cache-dir -r requirements_no_talib.txt

# Copy application code
COPY app/ ./app/
COPY config/ ./config/

# Copy credential files if they exist
COPY ALPACA_KEYS.json* ./
COPY POLYGON_API.json* ./
COPY GOOGLE_APPLICATION_CREDENTIALS.json* ./

# Create logs directory
RUN mkdir -p logs

# Test that TA-Lib works
RUN python -c "import talib; print('✅ TA-Lib version:', talib.__version__)"

# Set the default command to run the new main application
CMD ["python", "app/main.py"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.exit(0)"
